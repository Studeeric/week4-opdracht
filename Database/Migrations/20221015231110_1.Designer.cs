// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Database.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20221015231110_1")]
    partial class _1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Database.Attractie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Attracties", (string)null);
                });

            modelBuilder.Entity("Database.DateTimeBereik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Begin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Eind")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("DateTimeBereik");
                });

            modelBuilder.Entity("Database.GastInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("LaatstBezochteURL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GastInfo", (string)null);
                });

            modelBuilder.Entity("Database.Gebruiker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Gebruikers", (string)null);
                });

            modelBuilder.Entity("Database.Onderhoud", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("DataId")
                        .HasColumnType("int");

                    b.Property<string>("Probleem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("reparatieAttractieId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DataId");

                    b.HasIndex("reparatieAttractieId");

                    b.ToTable("Onderhoud", (string)null);
                });

            modelBuilder.Entity("Database.Reservering", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AttractieId")
                        .HasColumnType("int");

                    b.Property<int?>("DataId")
                        .HasColumnType("int");

                    b.Property<int?>("GastId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttractieId");

                    b.HasIndex("DataId");

                    b.HasIndex("GastId");

                    b.ToTable("Reserveringen", (string)null);
                });

            modelBuilder.Entity("MedewerkerOnderhoud", b =>
                {
                    b.Property<int>("DoetId")
                        .HasColumnType("int");

                    b.Property<int>("WordtGedaanDoorId")
                        .HasColumnType("int");

                    b.HasKey("DoetId", "WordtGedaanDoorId");

                    b.HasIndex("WordtGedaanDoorId");

                    b.ToTable("MedewerkerOnderhoud");
                });

            modelBuilder.Entity("MedewerkerOnderhoud1", b =>
                {
                    b.Property<int>("CoordineertId")
                        .HasColumnType("int");

                    b.Property<int>("WordtGecoordineerdDoorId")
                        .HasColumnType("int");

                    b.HasKey("CoordineertId", "WordtGecoordineerdDoorId");

                    b.HasIndex("WordtGecoordineerdDoorId");

                    b.ToTable("MedewerkerOnderhoud1");
                });

            modelBuilder.Entity("Database.Gast", b =>
                {
                    b.HasBaseType("Database.Gebruiker");

                    b.Property<int?>("BegeleiderId")
                        .HasColumnType("int");

                    b.Property<int>("Credits")
                        .HasColumnType("int");

                    b.Property<DateTime>("EersteBezoek")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FavorietId")
                        .HasColumnType("int");

                    b.Property<DateTime>("GeboorteDatum")
                        .HasColumnType("datetime2");

                    b.HasIndex("BegeleiderId")
                        .IsUnique()
                        .HasFilter("[BegeleiderId] IS NOT NULL");

                    b.HasIndex("FavorietId");

                    b.ToTable("Gasten", (string)null);
                });

            modelBuilder.Entity("Database.Medewerker", b =>
                {
                    b.HasBaseType("Database.Gebruiker");

                    b.ToTable("Medewerkers", (string)null);
                });

            modelBuilder.Entity("Database.Onderhoud", b =>
                {
                    b.HasOne("Database.DateTimeBereik", "Data")
                        .WithMany()
                        .HasForeignKey("DataId");

                    b.HasOne("Database.Attractie", "reparatieAttractie")
                        .WithMany("Onderhouds")
                        .HasForeignKey("reparatieAttractieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Data");

                    b.Navigation("reparatieAttractie");
                });

            modelBuilder.Entity("Database.Reservering", b =>
                {
                    b.HasOne("Database.Attractie", "Attractie")
                        .WithMany("Reserveringen")
                        .HasForeignKey("AttractieId");

                    b.HasOne("Database.DateTimeBereik", "Data")
                        .WithMany()
                        .HasForeignKey("DataId");

                    b.HasOne("Database.Gast", "Gast")
                        .WithMany("Reserveringen")
                        .HasForeignKey("GastId");

                    b.Navigation("Attractie");

                    b.Navigation("Data");

                    b.Navigation("Gast");
                });

            modelBuilder.Entity("MedewerkerOnderhoud", b =>
                {
                    b.HasOne("Database.Onderhoud", null)
                        .WithMany()
                        .HasForeignKey("DoetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Medewerker", null)
                        .WithMany()
                        .HasForeignKey("WordtGedaanDoorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedewerkerOnderhoud1", b =>
                {
                    b.HasOne("Database.Onderhoud", null)
                        .WithMany()
                        .HasForeignKey("CoordineertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Medewerker", null)
                        .WithMany()
                        .HasForeignKey("WordtGecoordineerdDoorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Database.Gast", b =>
                {
                    b.HasOne("Database.Gast", "Begeleider")
                        .WithOne("Begeleidt")
                        .HasForeignKey("Database.Gast", "BegeleiderId");

                    b.HasOne("Database.Attractie", "Favoriet")
                        .WithMany()
                        .HasForeignKey("FavorietId");

                    b.HasOne("Database.Gebruiker", null)
                        .WithOne()
                        .HasForeignKey("Database.Gast", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Begeleider");

                    b.Navigation("Favoriet");
                });

            modelBuilder.Entity("Database.Medewerker", b =>
                {
                    b.HasOne("Database.Gebruiker", null)
                        .WithOne()
                        .HasForeignKey("Database.Medewerker", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Database.Attractie", b =>
                {
                    b.Navigation("Onderhouds");

                    b.Navigation("Reserveringen");
                });

            modelBuilder.Entity("Database.Gast", b =>
                {
                    b.Navigation("Begeleidt");

                    b.Navigation("Reserveringen");
                });
#pragma warning restore 612, 618
        }
    }
}
